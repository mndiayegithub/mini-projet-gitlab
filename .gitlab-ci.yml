---
  # Use the official docker image.
image: docker:latest
services:
  - name: docker:dind
    alias: docker

stages:
  - Build image
  - Test acceptation
  - Release image
  - Deploy review
  - Stop review
  - Deploy staging
  - Test staging
  - Deploy prod
  - Test prod

.test_template: &test
  image: alpine
  only:
    - master
  script:
    - apk --no-cache add curl 
    - curl -X GET "https://$DOMAIN" | grep -q "Welcome"

.build:
  stage: Build image 
  script:
    - echo "Build the image"
    - docker build -t static-website .
    - docker save static-website > static-website.tar
  artifacts:
    paths:
      - static-website.tar

.test_acceptation:
  stage: Test acceptation
  script:
    - echo "Test the image"
    - docker rmi static-website || echo "image has been deleted"
    - docker load < static-website.tar
    - docker rm -vf static-website || echo "container already deleted"
    - docker run -d -p 80:8080 -e PORT=8080 --name static-website static-website
    - sleep 5
    - apk --no-cache add curl
    - curl -X GET "http://docker" | grep -q "Welcome"
    #- curl -I "http://docker" |grep -q "HTTP/1.1 200 OK"
    - docker rm -vf static-website && echo "clean container" 

.release_image:
  stage: Release image
  script:
    - echo "Release the image"
    - docker load < static-website.tar
    - docker tag static-website "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag static-website "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

.deploy_staging:
  stage: Deploy staging
  environment:
    name: staging
    url: https://my-static-website-staging.herokuapp.com/
  only:
    - master 
  script:
    - echo "Deploy to staging server"
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create my-static-website-staging || echo "project already exists"
    - heroku container:push -a my-static-website-staging web
    - heroku container:release -a my-static-website-staging web

.deploy_prod:
  stage: Deploy prod
  environment:
    name: prod
    url: https://my-static-website-prod.herokuapp.com/
  only:
    - master
  script:
    - echo "Deploy to prod server"
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create my-static-website-prod || echo "project already exists"
    - heroku container:push -a my-static-website-prod web
    - heroku container:release -a my-static-website-prod web

deploy_review:
  stage: Deploy review 
  environment: 
    name: review/$CI_COMMIT_REF_NAME
    url: https://my-static-website-$CI_COMMIT_REF_NAME.herokuapp.com/
    on_stop: stop_review
  only:
    - merge_requests
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create my-static-website-$CI_COMMIT_REF_NAME || echo "Project already exist"
    - heroku container:push -a my-static-website-$CI_COMMIT_REF_NAME web 
    - heroku container:release -a my-static-website-$CI_COMMIT_REF_NAME web

stop_review:
  stage: Stop review 
  variables:
    GIT_STRATEGY: none
  environment: 
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - merge_requests
  when: manual
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku apps:destroy -a my-static-website-$CI_COMMIT_REF_NAME -c my-static-website-$CI_COMMIT_REF_NAME

.test_staging:
  <<: *test
  stage: Test staging
  variables:
    DOMAIN: my-static-website-staging.herokuapp.com

.test_prod:
  <<: *test
  stage: Test prod
  variables:
    DOMAIN: my-static-website-prod.herokuapp.com

test_review:
  <<: *test
  stage: Test $CI_COMMIT_REF_NAME
  variables:
    DOMAIN: my-static-website-$CI_COMMIT_REF_NAME.herokuapp.com
